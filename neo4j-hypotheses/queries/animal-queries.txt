// ngly1 def - gene - o_gene - Phenotype - o_GeneX - GeneX - PathwayY - gene - glcnac

            MATCH path=(source)--(g1:GENE)-[:`RO:HOM0000020`]-(:GENE)--(ds:DISO)--(:GENE)-[:`RO:HOM0000020`]-(g2:GENE)--(pw:PHYS)--(:GENE)--(target)
            MATCH (source { id: 'OMIM:615273'}), (target { id: 'CHEBI:506227'})
            // no loops or only one pass per node
            WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x))
            WITH g1, g2, ds, pw, path,
                 // count animal models
                 size( (g1)-[:`RO:HOM0000020`]->() ) AS source_ortho,
                 size( (g2)-[:`RO:HOM0000020`]->() ) AS other_ortho,
                 // count node degree
                 max(size( (pw)-[]-() )) AS pwDegree,
                 max(size( (ds)-[]-() )) AS dsDegree,
                 // mark general nodes to filter path that contain them out
                 [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane','protein binding','visible','viable','phenotype']] AS nodes_marked,
                 // mark promiscuous edges to filter path that contain them out,
                 [r IN relationships(path) WHERE r.property_label IN ['interacts with','in paralogy relationship with','in orthology relationship with','colocalizes with']] AS edges_marked
            // condition to filter paths that do contain marked nodes and edges out
            WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND pwDegree <= 50 AND dsDegree <= 20
            RETURN count(distinct path) AS paths, count(distinct pw) as pathways, count(distinct ds) as diseases, count( distinct source_ortho ) AS source_ortho, count( distinct other_ortho ) AS other_ortho
            ORDER BY source_ortho, other_ortho DESC



//ngly1 - o_ngly1 - Phenotype - o_GeneX - GeneX - PathwayY - AQP1

// SANITY CHECK QUERIES

/* counts for 'Pngl::FlyBase:FBgn0033050' in all paths where an instance can be repeated within a path

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(ds:DISO)--(:GENE)-[:`RO:HOM0000020`]-(g1:GENE)--(pw:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768'}), (target { id: 'NCBIGene:358'})
// no loops or only one pass per node disabled
WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x) = False) // condition that allow loops
WITH g1, ds, pw, path,
     // count animal models
     size( (source)-[:`RO:HOM0000020`]->() ) AS source_ortho,
     size( (g1)-[:`RO:HOM0000020`]->() ) AS other_ortho,
     // count node degree
     max(size( (pw)-[]-() )) AS pwDegree,
     max(size( (ds)-[]-() )) AS dsDegree,
     // mark general nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane','protein binding','visible','viable','phenotype']] AS nodes_marked,
     // mark promiscuous edges to filter path that contain them out, 
     [r IN relationships(path) WHERE r.property_label IN ['interacts with','in paralogy relationship with','in orthology relationship with','colocalizes with']] AS edges_marked,
     // count sanity check
     [n IN nodes(path) WHERE n.id = 'FlyBase:FBgn0033050'] AS node_marked 
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND pwDegree <= 50 AND dsDegree <= 20 AND size(node_marked) > 0
RETURN count(path) // 0

/* counts for 'Pngl::FlyBase:FBgn0033050' in all paths 

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(ds:DISO)--(:GENE)-[:`RO:HOM0000020`]-(g1:GENE)--(pw:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768'}), (target { id: 'NCBIGene:358'})
// no loops or only one pass per node
WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x))
WITH g1, ds, pw, path,
     // count animal models
     size( (source)-[:`RO:HOM0000020`]->() ) AS source_ortho,
     size( (g1)-[:`RO:HOM0000020`]->() ) AS other_ortho,
     // count node degree
     max(size( (pw)-[]-() )) AS pwDegree,
     max(size( (ds)-[]-() )) AS dsDegree,
     // mark general nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane','protein binding','visible','viable','phenotype']] AS nodes_marked,
     // mark promiscuous edges to filter path that contain them out, 
     [r IN relationships(path) WHERE r.property_label IN ['interacts with','in paralogy relationship with','in orthology relationship with','colocalizes with']] AS edges_marked,
     // count sanity check
     [n IN nodes(path) WHERE n.id = 'FlyBase:FBgn0033050'] AS node_marked // condition for counts for 'Pngl' in all paths
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND pwDegree <= 50 AND dsDegree <= 20 AND size(node_marked) > 0
RETURN count(path) // 1036

/* see all paths

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(ds:DISO)--(:GENE)-[:`RO:HOM0000020`]-(g1:GENE)--(pw:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768'}), (target { id: 'NCBIGene:358'})
// no loops or only one pass per node
WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x))
WITH g1, ds, pw, path,
     // count animal models
     size( (source)-[:`RO:HOM0000020`]->() ) AS source_ortho,
     size( (g1)-[:`RO:HOM0000020`]->() ) AS other_ortho,
     // count node degree
     max(size( (pw)-[]-() )) AS pwDegree,
     max(size( (ds)-[]-() )) AS dsDegree,
     // mark general nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane','protein binding','visible','viable','phenotype']] AS nodes_marked,
     // mark promiscuous edges to filter path that contain them out, 
     [r IN relationships(path) WHERE r.property_label IN ['interacts with','in paralogy relationship with','in orthology relationship with','colocalizes with']] AS edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND pwDegree <= 50 AND dsDegree <= 20
RETURN path

/* stats about all paths

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(ds:DISO)--(:GENE)-[:`RO:HOM0000020`]-(g1:GENE)--(pw:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768'}), (target { id: 'NCBIGene:358'})
// no loops or only one pass per node
WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x))
WITH g1, ds, pw, path,
     // count animal models
     size( (source)-[:`RO:HOM0000020`]->() ) AS source_ortho,
     size( (g1)-[:`RO:HOM0000020`]->() ) AS other_ortho,
     // count node degree
     max(size( (pw)-[]-() )) AS pwDegree,
     max(size( (ds)-[]-() )) AS dsDegree,
     // mark general nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane','protein binding','visible','viable','phenotype']] AS nodes_marked,
     // mark promiscuous edges to filter path that contain them out, 
     [r IN relationships(path) WHERE r.property_label IN ['interacts with','in paralogy relationship with','in orthology relationship with','colocalizes with']] AS edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND pwDegree <= 50 AND dsDegree <= 20
RETURN count(distinct path) AS paths, count(distinct pw) as pathways, count(distinct ds) as diseases, count( distinct source_ortho ) AS source_ortho, count( distinct other_ortho ) AS other_ortho
//RETURN path

// SCRIPT QUERY

query_topology = """
(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(ds:DISO)--(:GENE)-[:`RO:HOM0000020`]-(g1:GENE)--(pw:PHYS)--(target:GENE)
"""

            query = """
            MATCH path=""" + query_topology + """
            MATCH (source { id: '""" + source + """'}), (target { id: '""" + target + """'})
            // no loops or only one pass per node
            WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x))
            WITH g1, ds, pw, path,
                 // count animal models
                 size( (source)-[:`RO:HOM0000020`]->() ) AS source_ortho,
                 size( (g1)-[:`RO:HOM0000020`]->() ) AS other_ortho,
                 // count node degree
                 max(size( (pw)-[]-() )) AS pwDegree,
                 max(size( (ds)-[]-() )) AS dsDegree,
                 // mark general nodes to filter path that contain them out
                 [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane','protein binding','visible','viable','phenotype']] AS nodes_marked,
                 // mark promiscuous edges to filter path that contain them out,
                 [r IN relationships(path) WHERE r.property_label IN ['interacts with','in paralogy relationship with','in orthology relationship with','colocalizes with']] AS edges_marked
            // condition to filter paths that do contain marked nodes and edges out
            WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND pwDegree <= """ + args.pwDegree + """ AND dsDegree <= """ + args.phDegree + """
            RETURN count(distinct path) AS paths, count(distinct pw) as pathways, count(distinct ds) as diseases, count( distinct source_ortho ) AS source_ortho, count( distinct other_ortho ) AS other_ortho
            ORDER BY source_ortho, other_ortho DESC
            """

// prioritize paths that can include more than one animal model - SCRIPT QUERY  

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(ds:DISO)--(:GENE)-[:`RO:HOM0000020`]-(g1:GENE)--(pw:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768'}), (target { id: 'NCBIGene:358'})
// no loops or only one pass per node
WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x))
WITH g1, ds, pw, path,
     // count animal models
     size( (source)-[:`RO:HOM0000020`]->() ) AS source_ortho,
     size( (g1)-[:`RO:HOM0000020`]->() ) AS other_ortho,
     // count node degree
     max(size( (pw)-[]-() )) AS pwDegree,
     max(size( (ds)-[]-() )) AS dsDegree,
     // mark general nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane','protein binding','visible','viable','phenotype']] AS nodes_marked,
     // mark promiscuous edges to filter path that contain them out, 
     [r IN relationships(path) WHERE r.property_label IN ['interacts with','in paralogy relationship with','in orthology relationship with','colocalizes with']] AS edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND pwDegree <= 50 AND dsDegree <= 20
RETURN count(distinct path) AS paths, count(distinct pw) as pathways, count(distinct ds) as diseases, count( distinct source_ortho ) AS source_ortho, count( distinct other_ortho ) AS other_ortho
//RETURN path 
ORDER BY source_ortho, other_ortho DESC


// automatic search for promiscuous nodes

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(ds:DISO)--(:GENE)-[:`RO:HOM0000020`]-(:GENE)--(pw:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768'}), (target { id: 'NCBIGene:358'})
// no loops or only one pass per node
WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x))
WITH ds, pw, path, 
     // count node degree
     max(size( (pw)-[]-() )) AS pwDegree,
     max(size( (ds)-[]-() )) AS dsDegree,
     // mark general nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane','protein binding','visible','viable','phenotype']] AS nodes_marked,
     // mark promiscuous edges to filter path that contain them out, 
     [r IN relationships(path) WHERE r.property_label IN ['interacts with','in paralogy relationship with','in orthology relationship with','colocalizes with']] AS edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND pwDegree <= 50 AND dsDegree <= 20
RETURN count(distinct path) as Path, count(distinct pw) as pathways, count(distinct ds) as diseases // 1004 paths (dsDegree <= 10 -> 548 paths)
//RETURN path 
//LIMIT 1000

// ++ optimum

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:DISO)--(:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768'}), (target { id: 'NCBIGene:358'})
// no loops or only one pass per node
WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x))
WITH source, target, path, 
     // mark general nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane','protein binding','visible','viable','phenotype']] AS nodes_marked,
     // mark promiscuous edges to filter path that contain them out, 
     [r IN relationships(path) WHERE r.property_label IN ['interacts with','in paralogy relationship with','in orthology relationship with','colocalizes with']] AS edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 
//RETURN count(distinct path) // 1852 paths
RETURN path 
LIMIT 1000

// Optimize the search not using LIMIT onto the results, but using constrains on the path pattern

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:DISO)--(:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768', preflabel: 'NGLY1'}), (target { id: 'NCBIGene:358', preflabel: 'AQP1'})
// no loops or only one pass per node
WHERE ALL(x IN nodes(path) WHERE single(y IN nodes(path) WHERE y = x))
WITH source, target, path, 
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane']] AS nodes_marked,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked,
     // mark nodes that are not interesting in this path pattern: 'protein binding', 'visible', 'viable', 'phenotype'
     [n IN nodes(path) WHERE n.id IN ['GO:0005515', 'FBcv:0000354', 'FBcv:0000349', 'FBcv:0001347']] AS pattern_nodes_marked,
     // mark edges that are not interesting in this path pattern: 'in paralogy relationship with', 'in orthology relationship with', 'colocalizes with'
     [r IN relationships(path) WHERE r.property_label IN ['in paralogy relationship with', 'in orthology relationship with', 'colocalizes with']] AS pattern_edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND size(pattern_edges_marked) = 0 AND size(pattern_nodes_marked) = 0
RETURN count(distinct path) // 1852 paths
//RETURN path 
//LIMIT 1000


// Direct + Indirect constrain on the pattern: Remove general terms => 1800 hypothesis

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:DISO)--(:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768', preflabel: 'NGLY1'}), (target { id: 'NCBIGene:358', preflabel: 'AQP1'})
WITH source, target, path, 
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane']] AS nodes_marked,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked,
     // mark edges that are not interesting in this path pattern: 'in paralogy relationship with', 'in orthology relationship with', 'colocalizes with'
     [r IN relationships(path) WHERE type(r) IN ['RO:HOM0000011', 'RO:HOM0000017', 'RO:0002325']] AS pattern_edges_marked,
     // mark nodes that are not interesting in this path pattern: 'protein binding', 'visible', 'viable', 'phenotype'
     [n IN nodes(path) WHERE n.id IN ['GO:0005515', 'FBcv:0000354', 'FBcv:0000349', 'FBcv:0001347']] AS pattern_nodes_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND size(pattern_edges_marked) = 0 AND size(pattern_nodes_marked) = 0
RETURN count(distinct path) // 1852 paths
//RETURN path 
//LIMIT 1000

// Indirect constrain on the pattern: Remove 'protein binding' (general pathway/process) => 2400 hypothesis

MATCH path=(source:GENE)--(:GENE)--(:DISO)--(:GENE)--(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768', preflabel: 'NGLY1'}), (target { id: 'NCBIGene:358', preflabel: 'AQP1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked,
     // mark edges that are not interesting in this path pattern: 'in paralogy relationship with', 'in orthology relationship with', 'colocalizes with'
     [r IN relationships(path) WHERE type(r) IN ['RO:HOM0000011', 'RO:HOM0000017', 'RO:0002325']] AS pattern_edges_marked,
     // mark nodes that are not interesting in this path pattern: 'protein binding', 'visible', 'viable', 'phenotype'
     [n IN nodes(path) WHERE n.id IN ['GO:0005515', 'FBcv:0000354', 'FBcv:0000349', 'FBcv:0001347']] AS pattern_nodes_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND size(pattern_edges_marked) = 0 AND size(pattern_nodes_marked) = 0
RETURN count(distinct path) // 2412 paths
//RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path
//LIMIT 1000


// Indirect constrain on the pattern: Remove phenotype, viable and visible (general phenotypes) nodes => 3000 hypothesis

MATCH path=(source:GENE)--(:GENE)--(:DISO)--(:GENE)--(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768', preflabel: 'NGLY1'}), (target { id: 'NCBIGene:358', preflabel: 'AQP1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked,
     // mark edges that are not interesting in this path pattern: 'in paralogy relationship with', 'in orthology relationship with', 'colocalizes with'
     [r IN relationships(path) WHERE type(r) IN ['RO:HOM0000011', 'RO:HOM0000017', 'RO:0002325']] AS pattern_edges_marked,
     // mark nodes that are not interesting in this path pattern: 'visible', 'viable', 'phenotype'
     [n IN nodes(path) WHERE n.id IN ['FBcv:0000354', 'FBcv:0000349', 'FBcv:0001347']] AS pattern_nodes_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND size(pattern_edges_marked) = 0 AND size(pattern_nodes_marked) = 0
RETURN count(distinct path) // 2840 paths
//RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path
//LIMIT 1000

// Indirect constrain on the pattern: Remove 1:n orthology, besides paralogy and colocalizes relationships: GREAT EFFECT => 5000 hypothesis!

MATCH path=(source:GENE)--(:GENE)--(:DISO)--(:GENE)--(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768', preflabel: 'NGLY1'}), (target { id: 'NCBIGene:358', preflabel: 'AQP1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked,
     // mark edges that are not interesting in this path pattern: 'in paralogy relationship with', 'in orthology relationship with', 'colocalizes with'
     [r IN relationships(path) WHERE type(r) IN ['RO:HOM0000011', 'RO:HOM0000017', 'RO:0002325']] AS pattern_edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND size(pattern_edges_marked) = 0
//RETURN count(distinct path) // 5204 paths
RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path
LIMIT 1000

// Direct constrain on the path => 5000 hypothesis

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:DISO)--(:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768', preflabel: 'NGLY1'}), (target { id: 'NCBIGene:358', preflabel: 'AQP1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 
RETURN count(distinct path) // 5204 paths
//RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path

// Fix prior query with the new data model => 35000 hypothesis

MATCH path=(source:GENE)--(:GENE)--(:DISO)--(:GENE)--(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:55768', preflabel: 'NGLY1'}), (target { id: 'NCBIGene:358', preflabel: 'AQP1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 
RETURN count(distinct path) // 35000 paths
//RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path
//LIMIT 1000


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//aqp1 - o_aqp1 - Phenotype - o_GeneX - GeneX - PathwayY - NGLY1

// Optimize the search not using LIMIT onto the results, but using constrains on the path pattern

// With Andrew: mixing Direct and Indirect constrains => 400 hypotheses (resonable size for human readibility)

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:DISO)--(:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:PHYS)--(target:GENE) 
MATCH (source { id: 'NCBIGene:358', preflabel: 'AQP1'}), (target { id: 'NCBIGene:55768', preflabel: 'NGLY1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol','protein binding','nucleus']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked,
     // mark edges that are not interesting in this path pattern: 'in paralogy relationship with', 'in orthology relationship with', 'colocalizes with'
     [r IN relationships(path) WHERE type(r) IN ['RO:HOM0000011', 'RO:HOM0000017', 'RO:0002325']] AS pattern_edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND size(pattern_edges_marked) = 0
//RETURN count(distinct path) // 416 paths
RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path

// Indirect constrain on the pattern: Remove 1:n orthology, besides paralogy and colocalizes: GREAT EFFECT => 1100 hypothesis!

MATCH path=(source:GENE)--(:GENE)--(:DISO)--(:GENE)--(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:358', preflabel: 'AQP1'}), (target { id: 'NCBIGene:55768', preflabel: 'NGLY1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked,
     // mark edges that are not interesting in this path pattern: 'in paralogy relationship with', 'in orthology relationship with', 'colocalizes with'
     [r IN relationships(path) WHERE type(r) IN ['RO:HOM0000011', 'RO:HOM0000017', 'RO:0002325']] AS pattern_edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND size(pattern_edges_marked) = 0
//RETURN count(distinct path) // 1102 paths
RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path

// Indirect constrain on the pattern: Remove paralogy and colocalizes => 32000 hypothesis

MATCH path=(source:GENE)--(:GENE)--(:DISO)--(:GENE)--(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:358', preflabel: 'AQP1'}), (target { id: 'NCBIGene:55768', preflabel: 'NGLY1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked,
     // mark edges that are not interesting in this path pattern: 'in paralogy relationship with', 'colocalizes with'
     [r IN relationships(path) WHERE type(r) IN ['RO:HOM0000011', 'RO:0002325']] AS pattern_edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 AND size(pattern_edges_marked) = 0
//RETURN count(distinct path) // 32000 paths
RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path
LIMIT 1000

// Direct constrain on the path => 1000 hypothesis

MATCH path=(source:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:DISO)--(:GENE)-[:`RO:HOM0000020`]-(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:358', preflabel: 'AQP1'}), (target { id: 'NCBIGene:55768', preflabel: 'NGLY1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 
//RETURN count(distinct path) // 1004 paths
RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path

// Fix prior query with the new data model => 36000 hypothesis

MATCH path=(source:GENE)--(:GENE)--(:DISO)--(:GENE)--(:GENE)--(:PHYS)--(target:GENE)
MATCH (source { id: 'NCBIGene:358', preflabel: 'AQP1'}), (target { id: 'NCBIGene:55768', preflabel: 'NGLY1'})
WITH source, target, path, 
     // mark promiscuous nodes to filter path that contain them out
     [n IN nodes(path) WHERE n.preflabel IN ['cytoplasm','cytosol']] AS nodes_marked,
     // one can use another unique attribute to mark nodes
     //[n IN nodes(path) WHERE n.id IN ['GO:0005737','GO:0005829']] AS nodes_marked,
     [r IN relationships(path) | type(r)] AS types,
     // mark promiscuous edges to filter path that contain them out, 'interacts with'
     [r IN relationships(path) WHERE type(r) = 'RO:0002434'] AS edges_marked
// condition to filter paths that do contain marked nodes and edges out
WHERE size(nodes_marked) = 0 AND size(edges_marked) = 0 
//RETURN count(distinct path) // 36000 paths
RETURN source.preflabel AS Source, target.preflabel AS Target, LENGTH(path) AS pathLength, extract(n IN nodes(path)| n.preflabel) AS nodesInPath, types AS edgesInPath, path AS Path
LIMIT 1000

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// search for not useful type nodes via relationships: 

// What is related, and how
// Sample the graph, reporting the patterns of connected labels,
// with min, max, avg degrees and associated node and relationship properties.
MATCH (n) where rand() <= 0.1
MATCH (n)-[r]->(m)
WITH n, type(r) as via, m
RETURN labels(n) as from,
   reduce(keys = [], keys_n in collect(keys(n)) | keys + filter(k in keys_n WHERE NOT k IN keys)) as props_from,
   via,
   labels(m) as to,
   reduce(keys = [], keys_m in collect(keys(m)) | keys + filter(k in keys_m WHERE NOT k IN keys)) as props_to,
   count(*) as freq
ORDER BY freq ASC

// automatic removal of node types

MATCH (n)
WITH n, [l IN labels(n) WHERE l IN ['VARI', 'GENO']] AS marked
WHERE size(marked) > 0
RETURN n.id, n.preflabel, labels(n)
//RETURN count(distinct n)


// automatic search for hubs

MATCH (n)
WITH n, 
// calculate node degree
max(size( (n)-[]-() )) AS degree,
// ALL node types are: ['GENE', 'DISO', 'PHYS', 'CHEM', 'ANAT' 'VARI', 'GENO']
// mark node types that can have high degree
//[l IN labels(n) WHERE l IN ['GENE', 'DISO', 'PHYS', 'CHEM']] AS labels_marked
// mark node types that can't have high degree
[l IN labels(n) WHERE l IN ['ANAT', 'VARI', 'GENO']] AS labels_marked
// filter hubs of certain node types
//WHERE degree >= 100 AND size(labels_marked) = 0
WHERE degree >= 100 AND size(labels_marked) > 0
RETURN n.id, n.preflabel, degree 
ORDER BY degree DESC

// general node degrees: max: 'protein binding' {165}; min: 'visible' {40}: better remove them by hand as well

MATCH (n)
WHERE 
     n.preflabel IN ['cytoplasm','cytosol','nucleus','metabolism','membrane', 'protein binding', 'visible', 'viable', 'phenotype'] 
RETURN n.id, n.preflabel, max(size( (n)-[]-() )) AS degree ORDER BY degree DESC

// search 4 hubs:  types of nodes with highest degree: gene (315), phys (165) and anat (158).
// GENO (size= 76, max_degree= 66), VARI (size= 30, max_degree= 35) can be types of nodes to be deleted cuz they don't give valuable information here.

MATCH (n)
RETURN
DISTINCT labels(n), count(*) as Size,
max(size( (n)-[]-() ) ) as Max_RelationshipCount
ORDER BY Max_RelationshipCount DESC








